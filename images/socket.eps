%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 389.000000 200.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.7 (Build 19H2) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 389 200
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 389 200
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /T put
dup 34 /w put
dup 35 /oacute put
dup 36 /j put
dup 37 /space put
dup 38 /p put
dup 39 /r put
dup 40 /o put
dup 41 /g put
dup 42 /a put
dup 43 /m put
dup 44 /G put
dup 45 /N put
dup 46 /I put
dup 47 /A put
dup 48 /Z put
dup 49 /D put
dup 50 /O put
dup 51 /s put
dup 52 /c put
dup 53 /k put
dup 54 /e put
dup 55 /t put
dup 56 /n put
dup 57 /d put
dup 58 /v put
dup 59 /period put
dup 60 /four put
dup 61 /S put
dup 62 /y put
dup 63 /i put
dup 64 /P put
dup 65 /eight put
dup 66 /zero put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070061B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F400B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C700010053000000C2006F0003001BBA0003000000032BB800031000BA0000000100032BB8000010303137153335536F6F6F6F00000002002AFFF5020202C50017003300CBB800342FB800352FB8003410B80018D0B800182FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8003510B80026DCB8000EDC410500DA000E00EA000E00025D411B0009000E0019000E0029000E0039000E0049000E0059000E0069000E0079000E0089000E0099000E00A9000E00B9000E00C9000E000D5D00BA0013001F00032BB8001310BA002D000700032BB8002D10303113343E0433321E0415140E0223222E0227141E0433323E0435342E0423220E0484010911213224243221110901051B3C36363C1B055A04101E344F37384E341E100404101E344F37374F341E1004015D1A3F3F3C2D1C1C2D3C3F3F1A2863573C3C57632727545047361F1F3647505427275450483620203648505400000002001C0000020302C50003000E0051BA0004000000032BB8000410B8000010B80009D0B8000410B8000BD0B8000410B80010DC00B800052FB8000A2FBA0001000800032BB8000110BA0003000A0005111239B80004D0B8000810B8000CD030312523133313112301152115333533350153EEEC025044FEBD01375060F1015BFEA501D4FE3352A6A64B000000030028FFF5020402C5000F002F00410161BA0030001600032BB8003010BA0026000800032BB8002610411B0006003000160030002600300036003000460030005600300066003000760030008600300096003000A6003000B6003000C60030000D5D410500D5003000E5003000025DBA001000160030111239B800102FB800







00>] def
/CharStrings 37 dict dup begin
/.notdef 0 def
/space 1 def
/period 2 def
/zero 3 def
/four 4 def
/eight 5 def
/A 6 def
/D 7 def
/G 8 def
/I 9 def
/N 10 def
/O 11 def
/P 12 def
/S 13 def
/T 14 def
/Z 15 def
/a 16 def
/c 17 def
/d 18 def
/e 19 def
/g 20 def
/i 21 def
/j 22 def
/k 23 def
/m 24 def
/n 25 def
/o 26 def
/p 27 def
/r 28 def
/s 29 def
/t 30 def
/v 31 def
/w 32 def
/y 33 def
/oacute 34 def
/acute 35 def
/uni20BE 36 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4445087 def
currentdict end
currentfile eexec

71A4A66F1CA788269BB2BF35F68C20EDF2FA2064BEA7C4C2B302EEA2BF8487C6CBB4AF2AA215AF00861E9727815E7341E2C6EC2B5E26CEB001447DE33FBC9BF59220BAA300075BE6E8FDDB2CAD6F264539E7FC560B02BDFA1756B5F765C3CCC7F2F79B61821B75177B6474A05644B81B46AF523C70E3C4F53C50B197EB57496C218D5BC86685C0E6F4B15B5F72A57AEF10228C5EE397F0A443A88AB95EC2ABC5F541CB23794496217D706981DF2EB9F7BFE91953E9371B15C09A8508A7718098A7F74BC215CA73B24240748C749CB9375FAA9B57D2BD80A79EE394B3D49D62687A7D2E470690CEC6B0E978E8135EAC9D94313B4F32A2808FD3D3C1A5D152D2A960164C82AB403413F8B5757613276EBFB43FBC7A796FECA1D8336024A99A8D790856F8E490866FBE358EEA8CC1B8BD30416EEF3451121A6B9E7EF12E9EAF98A9080BC25F156EE1C85F96F3B59502F25CFDE772BD645B0F81FE9430CFC002A28D45C9C13FF2DDD11D38380BABD9AB7E28EAD42295ED43843151287601420B58BAE40C255325F792A2F7533C51DEC60553DE4ECA70604C239C41A8F86D33D8E38BB0D6160C7FEF5983271578474210BB34F8B8F60D64386C8A8308505CAFA43DF90CD8CC91194BBA2E2415FEA09EF5ACAB4E03BDFE19CEAEF73BCB6C07618EAD36F84B14128CDAE93D9F9D856CFD4CB56279E756C155E1D8A69E464FDA24F8EB8170E62F2F86543EEED61347288B62B7910F1D8A4C6E22C91A70B63A5AD9C3D06C6FB5766B195733A4C64457F94697EBCF390531F33EE78811381B337E03E5A57EAC615CB878002912843EFC8B9960F8B9BFC59764C1B1A91544FF9218D4283586C8B53A20017240BBF5870BF1DB53BE0C699BE658F574B265C72E04E4FF4EB5FE1B9481EFB1B03AED2757290FD7326E7904898C3CF7E170F0A0F7B08FDB2F48FE6E585AFEC4A90F443F74128EF14647FB76291D876239A421259C215A801DF4721D506A889DBE3CC17C218342C9554DFF257A228A48E25D270F303103DA558932375B9409E53DABF1858295AF669A05B08765DF1C5F88DEA29E00290C381C8A04D870D57959C5445CED37A0214BDD6BEAB729B5D6DFC657A5A75D85F7F368EAE4D70387BD1F61F3EA26F4560C744110C84CAF3BCA2ACA718D5051DD0C2F75D71020478148BE0815A0B49B1F3208402CBA786D812326BB4E75ADC6C66C0A1080F8B4806B4186071C55CC389E7D68942FAD477FAE387581B1869A8C79299F057271C718D83ED6C5B50B7F5EE3B7655362D4C17B3932791D968541E928EDBED35364489D56E7B6768F00F72828228C28068DD0B903693BD89815A8914AF11B3BFBF3DEA99979F23CD330E5E2859066A9AE1FE06A7C1E5681EEF20145D97A4CB0B50492F106DE2DAB4A9E8EC5170C4CBAEE001BFF0594030EF8BFE0DD531EF93EE730
59AA0D8EBF3710994C90372DD0712E12200E9881BA243416A5B0504C7A75B6F58D4BD62FD202A38B66C12AFFA9E3CE1434B3DF6F595C7EE9BB77FE25944E0059EA5F32B3635FFA8E8D9476E3B2B328111A23632522EDF2D3CE028EA620FCBBC5A9690DE0F3A8143E84F600C2588D4C3CC94461E897EB8EB9AE1122159391C00FEDCA85F3497609A529DE5E991CA6B37ADF277CA077FFD62561DAA7C28403F406F5A4C0A39EE2A99914D77D836CEFD694FABDE655919179800E6B0C3112E9B547AB9C2B8BF774B1A5B4FE99DB737B7DC0809745419DA2DCBF7DE409236AC3327BB1874ED0681DECE773BEAD324D20D8B41EAC1AE0260FB46C28632579E63C729C67D1BB99C1D17FB65ACD53C05A45323D02D15832E42EDD343B9FAA2FD74296774004B6796CE3F8E69F64385D7BD1FCE19EB415EC93DD885A6B493345F3E29AF9F36F47514680F41819615ECDE9E017FF83C76F7FB0D2F1A30F9ECDFE2FE1539178A8AB95E64B0E337B7D3CDBDCB3B833D039BEAC3017BF257A48032D914F485F070F8CFEEBD320DB0606F20629AB22FF347CE08D145F427B19F343DAF41E51A7D2DB9B324D8D762443BA408F89F48601E30F83DD014D810614F292BC65695A45564692A6E35A47D0A71E372F563FE5E8BB53290E357C20F8598007B8495246AF4BB4CF7A284795B6DD2704DA445F9BC67C5D8AEFA2A8D2CDB5F3B4D05113E8B3322919D8096B1279E45CF614B1A74735730B9E3E6CF07ED468A445208AD548A18E39A3BD7C804EACB7F8C0408BEEB361C6E8990179AE936F806BE821EA416D69A94B5803D34E7BC3B9FD6A8DC5A2E692E4085A302B56A1F15DA2EFEC6E72A4637CF48B75FA505B763F591291E40CE59660D1D896C4B4997564234B362F60FE99E585D88D102E340469364D57BE8813DE164925F780851EC668EF18C13DAA81DC49520CEA5ADCF592BD04EB2F4B48DCAF2B906D972291D3C2B1B2AA3A917AD31AB892A82C8779084F132389D7F6CF7EA44E13F16C9C275F8480DCBA7FB593A064E70686B6651A5113B1E6841FE02AB78C095031A58B1F27149D221CECFC599EE3F67AA82BBE6A85EC83154E93492CB88B8E09E0BBCEEEA97376FB48E5B76488AB7DD48D5C3799A03134C3D4FF0D50CFB6AC1BE8798FACAF290182777EEF1BBC0F7C997265279274C09AFC196EC76F82599599D31C816518062468F2612A56E8F10A960FED6DBF528D5705B2157AE71372D2999DAA23C6B620E485B487D21C5F479937C393AFC8E215986C1D0B6F965C4D6D745ACA28177851A5AAE6FB32D4218A81F444C00A98FFB338EA50EAC5C46E41C7B69FEF52CBB402EF4A846DF2F4629129FBF0AAFA595F3F83EC90222FCC45F3E325BF34963D45B7167BC04141850E40036D0E0CCCD26D6B57B6E45D470C8746C6260A2DE8C26302946EDAD1FA2BE08F

08704502D0DA38D7AE5A95DE67B2079787173ADC9A3C7C47569EC85B7F5C40F77B755F27BE5E67C2B86F04D1C02A0998BCAE55500906FE0F3AC1E7D9E375B8811D68C18A4F02421F9AEAA1224736E7D86843AFB7FF102E7890CBCAEB222713807A466722374E134975DEDC1F0509BEFE0BD7E2F2C84A22B74CF73D2C2465740EF45FF2DF40D2CFBE37A02DD67F93024C4E3CA201F227D21C095FDD90898AE3CE6D36FD0D2D3ECCFB1A634D7E4ADC455BBE360B2787EC5FECC0E233C2030CFC27885D3B6BD4C88F7CD8EDE7C0902CAD8BB0F26ADC2A1F3082D439EC110EEF4BEECD1644B70252DF66850413979849CAED7FC379F90A2150224D46F276FEA76D8B777051BFBEA823D19D25AE0B030C0AA181D264688E71EF348C381BC3BC9DF56484956CCA6B641BE267A8523624393AD0F482D81222188B764CA292BA2A22D176B582C341B8359DA50CD552CF45D39DEE2CACE29654D2CF1978F10DF62A5488B302F26F3305FA7B5378FEF381940ACDE1159D1A0B1D9613264D85544924EC2E4643D041A0F8308ADFAE31E4880DAF1F68997088AED35973DC63C198A7D77171D55E01A8EF72AEC11712366EBFD713417C0CC0F7489237BBF26049C0657397DA149A480DD902D77283CC2AE26CAE91F6F401CAE4AD14A97001DE29FA96D777AC6557730194C60F32597936ABCB13A75CDCFBDB06A5BF2F8C02E290A3CC250F0C6D09CA0F1C19B0A6AE57A35C8FAA3CD050AFE87190739FDF6D6AB73BFE46858BCCD7A89FFA9DC8BF931D293AC2AB4CFDC25F3FE9AC0EDD2150C8B3C1C0A50F4F4137D8EC06F2660949933142B68E6FE0BFC5DD0C734186CA21D5F67CB5B6C25177DC1C5C02F9DBDF8F877274BE55A5E7C6F3FC4F1E0AFCEDAF5D6C13C272A81D5C6075898868043160CAB692391D6D0C5B62855DA1D35F7731FD47772004E59B33E2E97354821C5E430272BAF8451A891BF60923EA78910A918CB7DAA39E34E7F2E59F12405D63181D12C1177BC857AFC7578C5B4A050EAD3DAB53F73A88E892512E80B2300A0984794B90F6E197B28C57878F2209ED013303DA98390BA0387F070E5579B138984244EE87C2473BBEB7C357FDB91C7404C452E602950CE2A40819AAD0C952160FEBA5E3B5E671FB2238A90999CA08FC90EB022EFABD1BA9DB6459D151A5ACDCCD01B2F914D5EF18AF725940EE1FCD0114324442A952E06EF84A3FBDA5294364E627D719748BD9D89D43A198FAE3ED160F923994B074E3CFCD6B20E87AA1EAD388157B2EAA6D63B611CB32AB70C3343899FB82AE3C309B97458F6EEA8F5D0C76E6FD6CF3E772316E8117425F142E0407D7A732951AE516B2C5B19513D9A40C76320B4B462898E988F4E08F6A5D853D4D2B8B8B963325FDBC7DE0E38A04A59F79655F1304242E9A36B8D582702536604D2B4B68B180EFF2BC9C9E11

0614D3F95500B6F1D1E07BFA53F98EBEC798E32910B10DDF17E14830E2F3D5C495F2B18DBCB65051DC2E2C1F652E25B19A0BF837F91419443BA631AC216388EE3702642A39FBD571778E98FB356174E4FE358C4617C2B223706DBCF685ECDB306F4AF533510ABEBD2A26EF1E60F9419E3FB6D8CB01999E15A27314373DFD84A6A0555F351CB0793CA438D8791BA90EFEB4B641608140CFC0FAAE3BC46F062F136A7FF789DD90CB0FF682D5818906018412706AEC6A271128B9ADD86AFE9CE2D382DB6A6CDE92B6093545C9AF84A4EEBE90BF514927626664B3D95107D5A34BF62A68BA9EE56BC48AE08FBB59E58FD76ED5293D937A49211BF5BB65381AD89AFF541E2F7C26C9692733410C923E41A83E9A39E5CD235D27EAD4326F58DB9895B3D5AB53116A0E0CD4ED42E61348808C9E8122D5ABD25210B704F2A18A77A0856CB17DFDF937EFF880468385A16A8BD00C08AD6B997B39D50715C1D89271849486227C4F055BEBC0A7ADA16066EE449A33DC6EB2C4FE183468A89EB09AC395A17CEBD60E847C9F35BF0E9BBE7A702F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 389 200 rc
0 200 m
389 200 l
389 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-17 217 m
461 217 l
461 -72 l
-17 -72 l
h
-17 217 m
f
1 199 m
136 199 l
136 10 l
1 10 l
h
1 199 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -17 217 cm
18 18 m
153 18 l
153 207 l
18 207 l
h
18 18 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
36.908001 38 m
(!"#$%&'\(\)'*+)[ 7.408000 12.128000 9.184000 3.552000 4.448000 9.488000 5.040000 9.184000 9.184000 5.328000 8.592000 0.000000 ] xS
/Cs2 SC
0 0.78763753 0.79838932 sc
CM
118 145 m
145 145 l
145 19 l
118 19 l
h
118 145 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -17 217 cm
135 72 m
162 72 l
162 198 l
135 198 l
h
135 72 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 14 0 0 -14 0 0]sf
143.187 90.628006 m
(,)s
143.446 107.02 m
(-)s
146.687 123.412 m
(.)s
143.964 139.804 m
(/)s
144.22301 156.196 m
(0)s
143.57201 172.588 m
(1)s
143.17999 188.98 m
(2)s
/Cs2 SC
1 1 1 sc
CM
46 145 m
118 145 l
118 113.5 l
46 113.5 l
h
46 145 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -17 217 cm
63 72 m
135 72 l
135 103.5 l
63 103.5 l
h
63 72 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
75.143997 93.526001 m
(3\(4567)[ 8.000000 9.184000 8.592000 8.304000 8.592000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
46 113.5 m
118 113.5 l
118 82 l
46 82 l
h
46 113.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -17 217 cm
63 103.5 m
135 103.5 l
135 135 l
63 135 l
h
63 103.5 m
S
/Cs1 SC
0 sc
0 i
70.103996 125.026 m
(4\(88647)[ 8.592000 9.184000 8.896000 8.896000 8.592000 8.592000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
46 82 m
118 82 l
118 50.5 l
46 50.5 l
h
46 82 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -17 217 cm
63 135 m
135 135 l
135 166.5 l
63 166.5 l
h
63 135 m
S
/Cs1 SC
0 sc
0 i
81.512001 156.526 m
(3689)[ 8.000000 8.592000 8.896000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
46 50.5 m
118 50.5 l
118 19 l
46 19 l
h
46 50.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -17 217 cm
63 166.5 m
135 166.5 l
135 198 l
63 198 l
h
63 166.5 m
S
/Cs1 SC
0 sc
0 i
83.888 188.026 m
('64:)[ 5.040000 8.592000 8.592000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
207.98659 89.365417 m
174.53125 100 187.87241 189.5257 241.24113 174.25 c
246.19258 204.02722 308.25323 199.19405 307.84753 174.25 c
346.76147 206.15375 396.49115 142.53831 363.13516 110.63458 c
403.16068 95.166817 362.63007 11.82862 329.78125 25.75 c
327.15234 2.54638 268.42853 -5.5735998 263.27423 25.75 c
230.02174 -7.7020998 160.68501 43.732361 207.98659 89.365417 c
h
207.98659 89.365417 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -17 217 cm
224.98659 127.63458 m
191.53125 117 204.87241 27.4743 258.24115 42.75 c
263.19257 12.97278 325.25323 17.80596 324.84753 42.75 c
363.76147 10.84626 413.49115 74.461678 380.13516 106.36542 c
420.16068 121.83318 379.63007 205.17139 346.78125 191.25 c
344.15234 214.45361 285.42853 222.57359 280.27423 191.25 c
247.02174 224.7021 177.68501 173.26764 224.98659 127.63458 c
h
224.98659 127.63458 m
S
/Cs1 SC
0 sc
0 i
253.42 73 m
(9*7*;&'<6;\('\))[ 9.488000 8.592000 5.040000 8.592000 4.448000 9.488000 5.328000 8.896000 8.592000 4.448000 9.184000 4.880000 0.000000 ] xS
278.23599 109.448 m
(=7'\(8>%)[ 10.368000 5.040000 5.040000 9.184000 8.896000 8.000000 0.000000 ] xS
259.436 127.896 m
(?876'867\("6)[ 3.552000 8.896000 5.040000 8.592000 5.616000 8.896000 8.592000 5.040000 9.184000 12.128000 0.000000 ] xS
299.276 146.34399 m
(;)s
299.276 164.79199 m
(;)s
299.276 183.23999 m
(;)s
/Cs2 SC
0 0.78763753 0.79838932 sc
CM
145 109 m
226 109 l
226 82 l
145 82 l
h
145 109 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -17 217 cm
162 108 m
243 108 l
243 135 l
162 135 l
h
162 108 m
S
/Cs1 SC
0 sc
0 i
185.84 127.276 m
(@\('7%AB)[ 10.368000 9.184000 5.328000 5.040000 4.448000 8.896000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
